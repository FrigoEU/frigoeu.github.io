// Generated by psc-bundle 0.10.2
var PS = {};
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports.Semigroupoid = Semigroupoid;
  exports.compose = compose;
  exports.semigroupoidFn = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports.Category = Category;
  exports.id = id;
  exports.categoryFn = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  exports.flip = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  }; 
  var show = function (dict) {
      return dict.show;
  };
  exports.Show = Show;
  exports.show = show;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports.unit = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports.Functor = Functor;
  exports.map = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                       
  var append = function (dict) {
      return dict.append;
  };
  exports.Semigroup = Semigroup;
  exports.append = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports.Alt = Alt;
  exports.alt = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports.Apply = Apply;
  exports.apply = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports.Applicative = Applicative;
  exports.liftA1 = liftA1;
  exports.pure = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports.Bind = Bind;
  exports.bind = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports.Monad = Monad;
  exports.ap = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports.functorEff = functorEff;
  exports.applyEff = applyEff;
  exports.applicativeEff = applicativeEff;
  exports.bindEff = bindEff;
  exports.monadEff = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports.Plus = Plus;
  exports.empty = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports.mempty = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);    
  var eq = function (dict) {
      return dict.eq;
  };
  exports.Eq = Eq;
  exports.eq = eq;
  exports.eqInt = eqInt;
  exports.eqNumber = eqNumber;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports.LT = LT;
  exports.GT = GT;
  exports.EQ = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports.unsafeCompare = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $27 = compare(dictOrd)(x)(y);
              if ($27 instanceof Data_Ordering.LT) {
                  return y;
              };
              if ($27 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($27 instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: " + [ $27.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $28 = compare(dictOrd)(x)(y);
              if ($28 instanceof Data_Ordering.LT) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ $28.constructor.name ]);
          };
      };
  };
  exports.Ord = Ord;
  exports.compare = compare;
  exports.max = max;
  exports.min = min;
  exports.ordInt = ordInt;
  exports.ordNumber = ordNumber;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 214, column 1 - line 214, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar33) {
                  return $dollar33;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 265, column 1 - line 265, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 3 - line 67, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports.Nothing = Nothing;
  exports.Just = Just;
  exports.fromJust = fromJust;
  exports.fromMaybe = fromMaybe;
  exports.maybe = maybe;
  exports.functorMaybe = functorMaybe;
  exports.applyMaybe = applyMaybe;
  exports.applicativeMaybe = applicativeMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports.Newtype = Newtype;
  exports.unwrap = unwrap;
  exports.wrap = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports.HeytingAlgebra = HeytingAlgebra;
  exports.conj = conj;
  exports.disj = disj;
  exports.ff = ff;
  exports.implies = implies;
  exports.not = not;
  exports.tt = tt;
  exports.heytingAlgebraBoolean = heytingAlgebraBoolean;
  exports.heytingAlgebraFunction = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports.Foldable = Foldable;
  exports.foldMap = foldMap;
  exports.foldl = foldl;
  exports.foldr = foldr;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 3 - line 35, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 224, column 1 - line 224, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports.Left = Left;
  exports.Right = Right;
  exports.either = either;
  exports.functorEither = functorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  exports["throw"] = $$throw;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var otherwise = true;
  exports.otherwise = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";              

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Math"];
  exports.pi = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports.unsafePartial = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports.toNumber = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  exports.random = $foreign.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  exports.newRef = $foreign.newRef;
  exports.readRef = $foreign.readRef;
  exports.writeRef = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  exports.setInterval = $foreign.setInterval;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadError = function (__superclass_Control$dotMonad$dotMonad_0, catchError, throwError) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                          
  var catchError = function (dict) {
      return dict.catchError;
  };
  exports.MonadError = MonadError;
  exports.catchError = catchError;
  exports.throwError = throwError;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function ($88) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($88));
              })(function (a) {
                  var $56 = k(a);
                  return $56;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($89) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($89)));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function (a) {
                  var $60 = k(a);
                  return $60;
              })(function ($91) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($91));
              }));
          };
      }, function ($92) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($92)));
      });
  };
  exports.ExceptT = ExceptT;
  exports.mapExceptT = mapExceptT;
  exports.runExceptT = runExceptT;
  exports.functorExceptT = functorExceptT;
  exports.applyExceptT = applyExceptT;
  exports.applicativeExceptT = applicativeExceptT;
  exports.bindExceptT = bindExceptT;
  exports.monadExceptT = monadExceptT;
  exports.monadErrorExceptT = monadErrorExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports.Identity = Identity;
  exports.newtypeIdentity = newtypeIdentity;
  exports.functorIdentity = functorIdentity;
  exports.applyIdentity = applyIdentity;
  exports.applicativeIdentity = applicativeIdentity;
  exports.bindIdentity = bindIdentity;
  exports.monadIdentity = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                                 
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports.runExcept = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  /* global exports */
  "use strict";
  // jshint maxparams: 1

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports.NonEmpty = NonEmpty;
  exports.singleton = singleton;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List.Types line 53, column 3 - line 53, column 21: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($133) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($133));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 67, column 3 - line 70, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 63, column 3 - line 66, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });                                                                     
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports.Nil = Nil;
  exports.Cons = Cons;
  exports.NonEmptyList = NonEmptyList;
  exports.semigroupList = semigroupList;
  exports.functorList = functorList;
  exports.foldableList = foldableList;
  exports.altList = altList;
  exports.plusList = plusList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var singleton = function ($36) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($36));
  };
  exports.singleton = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Boolean = PS["Data.Boolean"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var fail = function ($112) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadErrorExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($112));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 108, column 1 - line 110, column 54: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  exports.TypeMismatch = TypeMismatch;
  exports.fail = fail;
  exports.unsafeReadTagged = unsafeReadTagged;
  exports.toForeign = $foreign.toForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports.unsafeCoerce = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Newtype = PS["Data.Newtype"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];                                   
  var readKeyboardEvent = Data_Foreign.unsafeReadTagged("KeyboardEvent");
  exports.readKeyboardEvent = readKeyboardEvent;
})(PS["DOM.Event.Types"] = PS["DOM.Event.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  exports.addEventListener = $foreign.addEventListener;
  exports.eventListener = $foreign.eventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
    "use strict";

  exports.key = function (e) {
    return e.key;
  };
})(PS["DOM.Event.KeyboardEvent"] = PS["DOM.Event.KeyboardEvent"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Boolean = PS["Data.Boolean"];
  var Control_Apply = PS["Control.Apply"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Enum = function (__superclass_Data$dotOrd$dotOrd_0, pred, succ) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.pred = pred;
      this.succ = succ;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var pred = function (dict) {
      return dict.pred;
  };
  exports.Enum = Enum;
  exports.pred = pred;
  exports.succ = succ;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.Event.KeyboardEvent"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var eventToKeyboardEvent = function ($13) {
      return DOM_Event_Types.readKeyboardEvent(Data_Foreign.toForeign($13));
  };
  exports.eventToKeyboardEvent = eventToKeyboardEvent;
  exports.key = $foreign.key;
})(PS["DOM.Event.KeyboardEvent"] = PS["DOM.Event.KeyboardEvent"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];                                     
  var elementToNode = Unsafe_Coerce.unsafeCoerce;
  var elementToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var documentToNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  exports.documentToNonElementParentNode = documentToNonElementParentNode;
  exports.elementToEventTarget = elementToEventTarget;
  exports.elementToNode = elementToNode;
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_List_Types = PS["Data.List.Types"];        
  var htmlDocumentToEventTarget = Unsafe_Coerce.unsafeCoerce;
  var htmlDocumentToDocument = Unsafe_Coerce.unsafeCoerce;
  exports.htmlDocumentToDocument = htmlDocumentToDocument;
  exports.htmlDocumentToEventTarget = htmlDocumentToEventTarget;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports.window = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var keypress = "keypress";
  var click = "click";
  exports.click = click;
  exports.keypress = keypress;
})(PS["DOM.HTML.Event.EventTypes"] = PS["DOM.HTML.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";        

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];                                        
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports.toMaybe = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Functor = PS["Data.Functor"];
  exports.document = $foreign.document;
  exports.innerHeight = $foreign.innerHeight;
  exports.innerWidth = $foreign.innerWidth;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.Node.Document"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports.createElement = $foreign.createElement;
})(PS["DOM.Node.Document"] = PS["DOM.Node.Document"] || {});
(function(exports) {
    "use strict";

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.Node.Element"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports.setAttribute = $foreign.setAttribute;
})(PS["DOM.Node.Element"] = PS["DOM.Node.Element"] || {});
(function(exports) {
    "use strict";

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Maybe = PS["Data.Maybe"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports.appendChild = $foreign.appendChild;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
    "use strict";

  exports.getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["DOM.Node.NonElementParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Nullable = PS["Data.Nullable"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  exports.getElementById = $foreign.getElementById;
})(PS["DOM.Node.NonElementParentNode"] = PS["DOM.Node.NonElementParentNode"] || {});
(function(exports) {
    "use strict";

  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = req === undefined ? undefined : req("util");

  exports.traceAny = function (x) {
    return function (k) {
      // node only recurses two levels into an object before printing
      // "[object]" for further objects when using console.log()
      if (util !== undefined) {
        console.log(util.inspect(x, { depth: null, colors: true }));
      } else {
        console.log(x);
      }
      return k({});
    };
  };
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Debug.Trace"];
  var Prelude = PS["Prelude"];
  var Data_Show = PS["Data.Show"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var spy = function (a) {
      return $foreign.traceAny(a)(function (v) {
          return a;
      });
  };
  exports.spy = spy;
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              $foreign.save(ctx)();
              var v = action();
              $foreign.restore(ctx)();
              return v;
          };
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.stroke(ctx)();
              return v;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var v = path();
              $foreign.fill(ctx)();
              return v;
          };
      };
  };
  exports.fillPath = fillPath;
  exports.getCanvasElementById = getCanvasElementById;
  exports.strokePath = strokePath;
  exports.withContext = withContext;
  exports.arc = $foreign.arc;
  exports.beginPath = $foreign.beginPath;
  exports.clearRect = $foreign.clearRect;
  exports.closePath = $foreign.closePath;
  exports.fillText = $foreign.fillText;
  exports.getCanvasHeight = $foreign.getCanvasHeight;
  exports.getCanvasWidth = $foreign.getCanvasWidth;
  exports.getContext2D = $foreign.getContext2D;
  exports.lineTo = $foreign.lineTo;
  exports.moveTo = $foreign.moveTo;
  exports.rect = $foreign.rect;
  exports.rotate = $foreign.rotate;
  exports.setCanvasHeight = $foreign.setCanvasHeight;
  exports.setCanvasWidth = $foreign.setCanvasWidth;
  exports.setFillStyle = $foreign.setFillStyle;
  exports.setLineWidth = $foreign.setLineWidth;
  exports.setStrokeStyle = $foreign.setStrokeStyle;
  exports.strokeRect = $foreign.strokeRect;
  exports.translate = $foreign.translate;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {exports.refEq = function(o1){
    return function(o2){
      return o1 == o2;
    };
  };
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
    "use strict";

  var requestAnimationFrame = null;

  // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
  exports.requestAnimationFrame_ = function(window_) {
    if (!requestAnimationFrame) {
      requestAnimationFrame = (function() {
        return window_.requestAnimationFrame ||
          window_.webkitRequestAnimationFrame ||
          window_.mozRequestAnimationFrame ||
          function(callback) {
            window_.setTimeout(callback, 1000 / 60);
          };
      })();
    }
    return function(action) {
      return function() {
        return requestAnimationFrame(action);
      };
    };
  };
})(PS["RAF"] = PS["RAF"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["RAF"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];        
  var requestAnimationFrame = function (action) {
      return function __do() {
          var w = DOM_HTML.window();
          return $foreign.requestAnimationFrame_(w)(action)();
      };
  };
  exports.requestAnimationFrame = requestAnimationFrame;
})(PS["RAF"] = PS["RAF"] || {});
(function(exports) {
  // Generated by psc version 0.10.2
  "use strict";
  var $foreign = PS["Main"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_KeyboardEvent = PS["DOM.Event.KeyboardEvent"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Event_EventTypes = PS["DOM.HTML.Event.EventTypes"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_Document = PS["DOM.Node.Document"];
  var DOM_Node_Element = PS["DOM.Node.Element"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var DOM_Node_NonElementParentNode = PS["DOM.Node.NonElementParentNode"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Debug_Trace = PS["Debug.Trace"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var RAF = PS["RAF"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];        
  var L = (function () {
      function L() {

      };
      L.value = new L();
      return L;
  })();
  var R = (function () {
      function R() {

      };
      R.value = new R();
      return R;
  })();
  var Circle = (function () {
      function Circle() {

      };
      Circle.value = new Circle();
      return Circle;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Seed = function (x) {
      return x;
  };
  var Direction = function (x) {
      return x;
  };
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();
  var Move = (function () {
      function Move(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Move.create = function (value0) {
          return function (value1) {
              return new Move(value0, value1);
          };
      };
      return Move;
  })();
  var PlayerTaps = (function () {
      function PlayerTaps(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PlayerTaps.create = function (value0) {
          return function (value1) {
              return new PlayerTaps(value0, value1);
          };
      };
      return PlayerTaps;
  })();
  var Tick = (function () {
      function Tick() {

      };
      Tick.value = new Tick();
      return Tick;
  })();
  var IncreaseSpeed = (function () {
      function IncreaseSpeed() {

      };
      IncreaseSpeed.value = new IncreaseSpeed();
      return IncreaseSpeed;
  })();
  var update$prime = function (v) {
      return function (v1) {
          if (v instanceof Tick && v1.direction instanceof L) {
              var $60 = {};
              for (var $61 in v1) {
                  if (v1.hasOwnProperty($61)) {
                      $60[$61] = v1[$61];
                  };
              };
              $60.x = Data_Ord.max(Data_Ord.ordNumber)(0.0)(v1.x - v1.speed);
              return $60;
          };
          if (v instanceof Tick && v1.direction instanceof R) {
              var $66 = {};
              for (var $67 in v1) {
                  if (v1.hasOwnProperty($67)) {
                      $66[$67] = v1[$67];
                  };
              };
              $66.x = Data_Ord.min(Data_Ord.ordNumber)(100.0)(v1.x + v1.speed);
              return $66;
          };
          if (v instanceof IncreaseSpeed) {
              var $72 = {};
              for (var $73 in v1) {
                  if (v1.hasOwnProperty($73)) {
                      $72[$73] = v1[$73];
                  };
              };
              $72.speed = v1.speed + 0.1;
              return $72;
          };
          throw new Error("Failed pattern match at Main line 129, column 1 - line 129, column 84: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var sideEq = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof L && y instanceof L) {
              return true;
          };
          if (x instanceof R && y instanceof R) {
              return true;
          };
          return false;
      };
  });
  var showSide = new Data_Show.Show(function (v) {
      if (v instanceof L) {
          return "L";
      };
      if (v instanceof R) {
          return "R";
      };
      throw new Error("Failed pattern match at Main line 40, column 3 - line 41, column 3: " + [ v.constructor.name ]);
  });
  var showShape = new Data_Show.Show(function (v) {
      if (v instanceof Square) {
          return "Square";
      };
      if (v instanceof Circle) {
          return "Circle";
      };
      throw new Error("Failed pattern match at Main line 82, column 3 - line 83, column 3: " + [ v.constructor.name ]);
  });
  var showColor = new Data_Show.Show(function (v) {
      if (v instanceof Red) {
          return "Red";
      };
      if (v instanceof Yellow) {
          return "Yellow";
      };
      if (v instanceof Green) {
          return "Green";
      };
      if (v instanceof Blue) {
          return "Blue";
      };
      throw new Error("Failed pattern match at Main line 77, column 3 - line 78, column 3: " + [ v.constructor.name ]);
  });
  var showMove = new Data_Show.Show(function (v) {
      return "Move " + (Data_Show.show(showShape)(v.value0) + (" " + Data_Show.show(showColor)(v.value1)));
  });
  var oppositeShape = function (v) {
      if (v instanceof Circle) {
          return Square.value;
      };
      if (v instanceof Square) {
          return Circle.value;
      };
      throw new Error("Failed pattern match at Main line 92, column 1 - line 92, column 30: " + [ v.constructor.name ]);
  };
  var opposite = function (v) {
      if (v instanceof L) {
          return R.value;
      };
      if (v instanceof R) {
          return L.value;
      };
      throw new Error("Failed pattern match at Main line 88, column 1 - line 88, column 37: " + [ v.constructor.name ]);
  };
  var newtypeSeed = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Seed);
  var newtypeDirection = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Direction);
  var makeSeed = Data_Functor.map(Control_Monad_Eff.functorEff)(Seed)(Control_Monad_Eff_Random.random);
  var loopRAF = function (eff) {
      return RAF.requestAnimationFrame(function __do() {
          RAF.requestAnimationFrame(loopRAF(eff))();
          return eff();
      });
  };
  var itsYourTurn = function (v) {
      return function (s2) {
          return Data_Eq.eq(sideEq)(v)(s2);
      };
  };
  var initialProjState = {
      x: 50.0, 
      speed: 0.5, 
      direction: R.value, 
      move: new Move(Circle.value, Red.value)
  };
  var handleKeypress = function (ev) {
      if (DOM_Event_KeyboardEvent.key(ev) === "j") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Circle.value, Red.value)));
      };
      if (DOM_Event_KeyboardEvent.key(ev) === "k") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Circle.value, Yellow.value)));
      };
      if (DOM_Event_KeyboardEvent.key(ev) === "l") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Circle.value, Green.value)));
      };
      if (DOM_Event_KeyboardEvent.key(ev) === "m") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Circle.value, Blue.value)));
      };
      if (DOM_Event_KeyboardEvent.key(ev) === "u") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Square.value, Red.value)));
      };
      if (DOM_Event_KeyboardEvent.key(ev) === "i") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Square.value, Yellow.value)));
      };
      if (DOM_Event_KeyboardEvent.key(ev) === "o") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Square.value, Green.value)));
      };
      if (DOM_Event_KeyboardEvent.key(ev) === "p") {
          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(new PlayerTaps(R.value, new Move(Square.value, Blue.value)));
      };
      return Data_Maybe.Nothing.value;
  };
  var getShape = function (v) {
      return v.value0;
  };
  var getPosition = function (v) {
      return function (v1) {
          if (v instanceof Circle && v1 instanceof Red) {
              return "bottom: 90px; right: 50px;";
          };
          if (v instanceof Circle && v1 instanceof Yellow) {
              return "bottom: 50px; right: 10px;";
          };
          if (v instanceof Circle && v1 instanceof Green) {
              return "bottom: 10px; right: 50px;";
          };
          if (v instanceof Circle && v1 instanceof Blue) {
              return "bottom: 50px; right: 90px;";
          };
          if (v instanceof Square && v1 instanceof Red) {
              return "bottom: 90px; left: 50px;";
          };
          if (v instanceof Square && v1 instanceof Yellow) {
              return "bottom: 50px; left: 90px;";
          };
          if (v instanceof Square && v1 instanceof Green) {
              return "bottom: 10px; left: 50px;";
          };
          if (v instanceof Square && v1 instanceof Blue) {
              return "bottom: 50px; left: 10px;";
          };
          throw new Error("Failed pattern match at Main line 211, column 1 - line 212, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getOrder = function (v) {
      if (v instanceof Red) {
          return 1;
      };
      if (v instanceof Yellow) {
          return 2;
      };
      if (v instanceof Green) {
          return 3;
      };
      if (v instanceof Blue) {
          return 4;
      };
      throw new Error("Failed pattern match at Main line 57, column 1 - line 58, column 1: " + [ v.constructor.name ]);
  };
  var getColor = function (v) {
      return v.value1;
  };
  var getClass = function (v) {
      if (v instanceof Circle) {
          return "ui-button-circle";
      };
      if (v instanceof Square) {
          return "ui-button-square";
      };
      throw new Error("Failed pattern match at Main line 207, column 1 - line 208, column 1: " + [ v.constructor.name ]);
  };
  var makeButton = function (doc) {
      return function (disp) {
          return function (s) {
              return function (c) {
                  return function __do() {
                      var v = DOM_Node_Document.createElement("button")(doc)();
                      DOM_Node_Element.setAttribute("class")(getClass(s))(v)();
                      DOM_Node_Element.setAttribute("style")(getPosition(s)(c) + (" background-color: " + Data_Show.show(showColor)(c)))(v)();
                      DOM_Event_EventTarget.addEventListener(DOM_HTML_Event_EventTypes.click)(DOM_Event_EventTarget.eventListener(function (v1) {
                          return disp(new PlayerTaps(R.value, new Move(s, c)));
                      }))(false)(DOM_Node_Types.elementToEventTarget(v))();
                      return DOM_Node_Types.elementToNode(v);
                  };
              };
          };
      };
  };
  var fromInt = function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(Red.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Yellow.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(Green.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(Blue.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqShape = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Circle && y instanceof Circle) {
              return true;
          };
          if (x instanceof Square && y instanceof Square) {
              return true;
          };
          return false;
      };
  });
  var render = function (ctx) {
      return function (dims) {
          return function (pstate) {
              return function __do() {
                  Graphics_Canvas.clearRect(ctx)({
                      x: 0.0, 
                      y: 0.0, 
                      w: dims.x, 
                      h: dims.y
                  })();
                  var scaleX = dims.x / 100.0;
                  var scaleY = dims.y / 100.0;
                  Graphics_Canvas.setFillStyle("#BBBBBB")(ctx)();
                  Graphics_Canvas.setStrokeStyle("#BBBBBB")(ctx)();
                  Graphics_Canvas.setLineWidth(2.0)(ctx)();
                  Graphics_Canvas.strokePath(ctx)(function __do() {
                      Graphics_Canvas.beginPath(ctx)();
                      Graphics_Canvas.moveTo(ctx)(dims.x / 2.0)(0.0)();
                      Graphics_Canvas.lineTo(ctx)(dims.x / 2.0)(dims.y)();
                      return Graphics_Canvas.closePath(ctx)();
                  })();
                  Graphics_Canvas.strokeRect(ctx)({
                      x: 0.0, 
                      y: 0.0, 
                      w: dims.x, 
                      h: dims.y
                  })();
                  Graphics_Canvas.setFillStyle(Data_Show.show(showColor)(getColor(pstate.move)))(ctx)();
                  (function () {
                      var $105 = Data_Eq.eq(eqShape)(getShape(pstate.move))(Square.value);
                      if ($105) {
                          return Graphics_Canvas.withContext(ctx)((function () {
                              var rectwidth = scaleY * 35.0;
                              return function __do() {
                                  Graphics_Canvas.translate({
                                      translateX: scaleX * pstate.x, 
                                      translateY: scaleY * 50.0
                                  })(ctx)();
                                  Graphics_Canvas.rotate($$Math.pi / 4.0)(ctx)();
                                  return Graphics_Canvas.fillPath(ctx)(Graphics_Canvas.rect(ctx)({
                                      x: -rectwidth / 2.0, 
                                      y: -rectwidth / 2.0, 
                                      w: rectwidth, 
                                      h: rectwidth
                                  }))();
                              };
                          })());
                      };
                      if (!$105) {
                          return Graphics_Canvas.fillPath(ctx)(Graphics_Canvas.arc(ctx)({
                              x: scaleX * pstate.x, 
                              y: scaleY * 50.0, 
                              r: scaleY * 20.0, 
                              start: 0.0, 
                              end: $$Math.pi * 2.0
                          }));
                      };
                      throw new Error("Failed pattern match at Main line 259, column 3 - line 278, column 11: " + [ $105.constructor.name ]);
                  })()();
                  Graphics_Canvas.fillText(ctx)(Data_Show.show(showMove)(pstate.move))(20.0)(20.0)();
                  return Data_Unit.unit;
              };
          };
      };
  };
  var eqColor = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Red && y instanceof Red) {
              return true;
          };
          if (x instanceof Yellow && y instanceof Yellow) {
              return true;
          };
          if (x instanceof Green && y instanceof Green) {
              return true;
          };
          if (x instanceof Blue && y instanceof Blue) {
              return true;
          };
          return false;
      };
  });
  var eqMove = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(eqShape)(x.value0)(y.value0) && Data_Eq.eq(eqColor)(x.value1)(y.value1);
      };
  });
  var ordColor = new Data_Ord.Ord(function () {
      return eqColor;
  }, function (a) {
      return function (b) {
          return Data_Ord.compare(Data_Ord.ordInt)(getOrder(a))(getOrder(b));
      };
  });
  var enumColor = new Data_Enum.Enum(function () {
      return ordColor;
  }, function (a) {
      return fromInt(getOrder(a) - 1);
  }, function (a) {
      return fromInt(getOrder(a) + 1 | 0);
  });
  var nextInCycle = function ($170) {
      return Data_Maybe.fromMaybe(Red.value)(Data_Enum.succ(enumColor)($170));
  };
  var randomCorrectMove = function (s) {
      return function (v) {
          if (Data_Newtype.unwrap(newtypeSeed)(s) < 0.5) {
              return new Move(v.value0, nextInCycle(v.value1));
          };
          return new Move(oppositeShape(v.value0), v.value1);
      };
  };
  var drawButtons = function (doc$prime) {
      return function (disp) {
          return function (h) {
              return function (w) {
                  var doc = DOM_HTML_Types.htmlDocumentToDocument(doc$prime);
                  return function __do() {
                      var v = DOM_Node_NonElementParentNode.getElementById("ui")(DOM_Node_Types.documentToNonElementParentNode(doc))();
                      var ui = DOM_Node_Types.elementToNode(Partial_Unsafe.unsafePartial(function (dictPartial) {
                          return Data_Maybe.fromJust(dictPartial)(Data_Nullable.toMaybe(v));
                      }));
                      (function __do() {
                          var b = makeButton(doc)(disp)(Circle.value)(Red.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      (function __do() {
                          var b = makeButton(doc)(disp)(Circle.value)(Yellow.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      (function __do() {
                          var b = makeButton(doc)(disp)(Circle.value)(Green.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      (function __do() {
                          var b = makeButton(doc)(disp)(Circle.value)(Blue.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      (function __do() {
                          var b = makeButton(doc)(disp)(Square.value)(Red.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      (function __do() {
                          var b = makeButton(doc)(disp)(Square.value)(Yellow.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      (function __do() {
                          var b = makeButton(doc)(disp)(Square.value)(Green.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      (function __do() {
                          var b = makeButton(doc)(disp)(Square.value)(Blue.value)();
                          return DOM_Node_Node.appendChild(b)(ui)();
                      })();
                      return Data_Unit.unit;
                  };
              };
          };
      };
  };
  var canReflect = function (v) {
      return function (v1) {
          if (Data_Eq.eq(eqShape)(v.value0)(v1.value0)) {
              return Data_Eq.eq(eqColor)(nextInCycle(v.value1))(v1.value1);
          };
          return Data_Eq.eq(eqColor)(v.value1)(v1.value1);
      };
  };
  var update = function (v) {
      return function (v1) {
          if (Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(itsYourTurn)(v1.direction)(v.value0)) {
              return v1;
          };
          if (v1.direction instanceof L && v1.x >= 50.0) {
              return v1;
          };
          if (v1.direction instanceof R && v1.x <= 50.0) {
              return v1;
          };
          var $144 = canReflect(v1.move)(v.value1);
          if ($144) {
              var $145 = {};
              for (var $146 in v1) {
                  if (v1.hasOwnProperty($146)) {
                      $145[$146] = v1[$146];
                  };
              };
              $145.direction = opposite(v1.direction);
              $145.move = v.value1;
              return $145;
          };
          if (!$144) {
              return v1;
          };
          throw new Error("Failed pattern match at Main line 117, column 35 - line 119, column 43: " + [ $144.constructor.name ]);
      };
  };
  var botDecision = function (pstate) {
      return function (v) {
          return function (v1) {
              if (Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(itsYourTurn)(pstate.direction)(v)) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof L) {
                  var $153 = pstate.x < Data_Newtype.unwrap(newtypeSeed)(v1.xseed) * 50.0 - 5.0;
                  if ($153) {
                      return new Data_Maybe.Just(randomCorrectMove(v1.moveseed)(pstate.move));
                  };
                  if (!$153) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Main line 295, column 42 - line 297, column 56: " + [ $153.constructor.name ]);
              };
              if (v instanceof R) {
                  var $156 = pstate.x > 100.0 - (Data_Newtype.unwrap(newtypeSeed)(v1.xseed) * 50.0 + 5.0);
                  if ($156) {
                      return new Data_Maybe.Just(randomCorrectMove(v1.moveseed)(pstate.move));
                  };
                  if (!$156) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Main line 298, column 42 - line 300, column 56: " + [ $156.constructor.name ]);
              };
              throw new Error("Failed pattern match at Main line 294, column 1 - line 294, column 78: " + [ pstate.constructor.name, v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      var v1 = Data_Maybe.maybe(Control_Monad_Eff_Exception["throw"]("No canvas element found"))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(v)();
      var v2 = DOM_HTML.window();
      var v3 = DOM_HTML_Window.document(v2)();
      (function __do() {
          var i = DOM_HTML_Window.innerWidth(v2)();
          return Graphics_Canvas.setCanvasWidth(Data_Int.toNumber(i))(v1)();
      })();
      (function __do() {
          var i = DOM_HTML_Window.innerHeight(v2)();
          return Graphics_Canvas.setCanvasHeight(Data_Int.toNumber(i))(v1)();
      })();
      var v4 = Graphics_Canvas.getCanvasWidth(v1)();
      var v5 = Graphics_Canvas.getCanvasHeight(v1)();
      var v6 = Graphics_Canvas.getContext2D(v1)();
      var v7 = Control_Monad_Eff_Ref.newRef(initialProjState)();
      var v8 = Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(function (v8) {
          return function (v9) {
              return {
                  xseed: v8, 
                  moveseed: v9
              };
          };
      })(makeSeed))(makeSeed))(Control_Monad_Eff_Ref.newRef)();
      var dispatch = function (act) {
          return function __do() {
              var $171 = Control_Monad_Eff_Ref.readRef(v7)();
              return Control_Monad_Eff_Ref.writeRef(v7)(update(Debug_Trace.spy(act))($171))();
          };
      };
      var dispatch$prime = function (act) {
          return function __do() {
              var $172 = Control_Monad_Eff_Ref.readRef(v7)();
              return Control_Monad_Eff_Ref.writeRef(v7)(update$prime(act)($172))();
          };
      };
      drawButtons(v3)(dispatch)(200.0)(600.0)();
      loopRAF(Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_Ref.readRef(v7))(render(v6)({
          x: v4, 
          y: v5
      })))();
      Control_Monad_Eff_Timer.setInterval(16)(dispatch$prime(Tick.value))();
      Control_Monad_Eff_Timer.setInterval(50)(function __do() {
          var v9 = Control_Apply.apply(Control_Monad_Eff.applyEff)(Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(botDecision)(Control_Monad_Eff_Ref.readRef(v7)))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(L.value)))(Control_Monad_Eff_Ref.readRef(v8))();
          return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(function (act) {
              return function __do() {
                  dispatch(new PlayerTaps(L.value, act))();
                  return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Apply.apply(Control_Monad_Eff.applyEff)(Data_Functor.map(Control_Monad_Eff.functorEff)(function (v10) {
                      return function (v11) {
                          return {
                              xseed: v10, 
                              moveseed: v11
                          };
                      };
                  })(makeSeed))(makeSeed))(Control_Monad_Eff_Ref.writeRef(v8))();
              };
          })(v9)();
      })();
      Control_Monad_Eff_Timer.setInterval(5000)(dispatch$prime(IncreaseSpeed.value))();
      DOM_Event_EventTarget.addEventListener(DOM_HTML_Event_EventTypes.keypress)(DOM_Event_EventTarget.eventListener(function (ev) {
          return Data_Either.either(function (v9) {
              return Control_Monad_Eff_Exception["throw"]("No keyboard event");
          })(function (e) {
              return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit))(dispatch)(handleKeypress(e));
          })(Control_Monad_Except.runExcept(DOM_Event_KeyboardEvent.eventToKeyboardEvent(ev)));
      }))(false)(DOM_HTML_Types.htmlDocumentToEventTarget(v3))();
      return Data_Unit.unit;
  };
  exports.Tick = Tick;
  exports.IncreaseSpeed = IncreaseSpeed;
  exports.Red = Red;
  exports.Yellow = Yellow;
  exports.Green = Green;
  exports.Blue = Blue;
  exports.Direction = Direction;
  exports.Move = Move;
  exports.PlayerTaps = PlayerTaps;
  exports.Seed = Seed;
  exports.Circle = Circle;
  exports.Square = Square;
  exports.L = L;
  exports.R = R;
  exports.botDecision = botDecision;
  exports.canReflect = canReflect;
  exports.drawButtons = drawButtons;
  exports.fromInt = fromInt;
  exports.getClass = getClass;
  exports.getColor = getColor;
  exports.getOrder = getOrder;
  exports.getPosition = getPosition;
  exports.getShape = getShape;
  exports.handleKeypress = handleKeypress;
  exports.initialProjState = initialProjState;
  exports.itsYourTurn = itsYourTurn;
  exports.loopRAF = loopRAF;
  exports.main = main;
  exports.makeButton = makeButton;
  exports.makeSeed = makeSeed;
  exports.nextInCycle = nextInCycle;
  exports.opposite = opposite;
  exports.oppositeShape = oppositeShape;
  exports.randomCorrectMove = randomCorrectMove;
  exports.render = render;
  exports.update = update;
  exports["update'"] = update$prime;
  exports.sideEq = sideEq;
  exports.showSide = showSide;
  exports.newtypeDirection = newtypeDirection;
  exports.eqColor = eqColor;
  exports.eqShape = eqShape;
  exports.eqMove = eqMove;
  exports.ordColor = ordColor;
  exports.enumColor = enumColor;
  exports.showColor = showColor;
  exports.showShape = showShape;
  exports.showMove = showMove;
  exports.newtypeSeed = newtypeSeed;
  exports.refEq = $foreign.refEq;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
